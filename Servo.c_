#include "Servo.h"
#include <Adafruit_PWMServoDriver.h>



void Servo::log(String Message){
  if(debug){
    Serial.println(Message);
  }
}

Servo::Servo(int pin, int restingPos, String type, int Number){
  myServos = Adafruit_PWMServoDriver();
  myServos.begin();
  myServos.setPWMFreq(60);

  Serial.println("Init " + type + " " + Number);
  this->servonum = pin;
  this->Number = Number;
  this->type = type;
  SetRestingPosition(restingPos);
  Rest();
}

void Servo::init(int pin, int restingPos, String type, int Number){
  
}

void Servo::SetMinPos(int pos){
  this->minServoPos = pos;
}

void Servo::SetMaxPos(int pos){
  this->maxServoPos = pos;
}

void Servo::SetStraightPos(int pos){
  this->straightServoPos = pos;
}

void Servo::SetRestingPosition(int restingPos){
  this->restingPos = restingPos;      
}

void Servo::DriveToStraight(){
  DriveServo(straightServoPos);
}

void Servo::DriveToRest(){
  DriveServo(restingPos);
}

void Servo::Rest(){
  //DriveServo(restingPos);
  myServos.setPWM(servonum, 0, restingPos);
  currentPos = restingPos;
}

void Servo::Straight(){
  if(straightServoPos){
    DriveServo(straightServoPos);
  }
}

void Servo::Up() {
  log("Opening Greifer");
  DriveServo(minServoPos);
}

void Servo::Down(){
  log("Closing Greifer");
  DriveServo(maxServoPos);
}

void Servo::add(int value){
  int _desiredPos = currentPos + value;
  DriveServo(_desiredPos);
}

void Servo::substract(int value){
  int _desiredPos = currentPos - value;
  DriveServo(_desiredPos);
}

bool Servo::isPosAllowed(int pos){
  bool returnValue;
  if(minServoPos && pos < Servo::minServoPos){
    return false;       
  }
  if(maxServoPos && pos > maxServoPos){
    return false;
  }
  return true;
}

void Servo::DriveServoStep(){
  if(desiredPos){
    if(desiredPos <= currentPos){
      int nextStep = currentPos + servoStepSize;
      if(isPosAllowed(nextStep)){
        myServos.setPWM(servonum, 0, nextStep);
        currentPos = nextStep;
        if(currentPos >= desiredPos){
          myServos.setPWM(servonum, 0, desiredPos);
          desiredPos = 0;
        }
      } else {
        Serial.println("Position not allowd!");
        desiredPos = 0;
      }
    } else {
      int nextStep = currentPos - servoStepSize;
      myServos.setPWM(servonum, 0, nextStep);
      currentPos = nextStep;
      if(isPosAllowed(nextStep)){
        if(currentPos <= desiredPos){
          myServos.setPWM(servonum, 0, desiredPos);
          desiredPos = 0;
        }
      } else {
        Serial.println("Position not allowd!");
        desiredPos = 0;
      }
    }
  }
}

void Servo::DriveServo(int pos){
  if(currentPos >= pos){
    log("Driving Servo up");
    DriveServoUp(pos);
  } else {
    log("Driving Servo down");
    DriveServoDown(pos);
  }
}

void Servo::DriveServoNoDelay(int pos){
  myServos.setPWM(servonum, 0, pos);
  currentPos = pos;
}

void Servo::DriveServoUp(int desiredPos){
  log("Driving Gelenk servo to position: " + char(desiredPos));
  for (int pos = currentPos; pos >= desiredPos; pos -= servoStepSize) {
    log("moving Greifer to Pos: " + char(pos));
    myServos.setPWM(servonum, 0, pos);
    currentPos = pos;
    delay(servoWriteDelay);
  }
}

void Servo::DriveServoDown(int desiredPos){
  log("Driving Gelenk servo to position: " + char(desiredPos));
  for (int pos = currentPos; pos <= desiredPos; pos += servoStepSize) { 
      log("moving Greifer to Pos: " + char(pos));
      myServos.setPWM(servonum, 0, pos);
      currentPos = pos;
      delay(servoWriteDelay);
  }
}
